pragma solidity >=0.4.22 <0.6.0;
/// This is the contract for the entire CPD management process
contract CPDMgmt {                
    uint public constant totalCPD = 1000000;        /// Total CPD Units in circulation. 

    /// This section contains CPD-specific values for use for the SC.
    string public constant symbol = "CPD";          /// Unit setting for CPD units.
    string public constant name = "CPD Unit/s";     /// Name setting for CPD units.
    
    /// This section contains mapping variables for allowed values for balance query.
    mapping (address => uint) Balances;
    mapping (address => mapping (address => uint)) Allowed;
   
    /// (TEST) section
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    
    /// (TEST) Function returns total CPD units in circulation to whoever queries it. 
    function PRCWalletBalanceQuery() public {
       Balances[msg.sender] = totalCPD;             /// Uses address from WalletBalance to check address.
    }
    
    /// Function for balance inquiry.
    function GetWalletBalance(address _owner) public view returns (uint CurrentBalance) {     /// Try either view or pure keywords.
        return Balances[_owner];                           /// Returns the current balance of the PRC wallet.
    } 
    
    /// Function handles transfer of units to another actor.
    function UnitTransfer(address _to, uint _value) public returns (bool success) {
        require (
            Balances[msg.sender] >= _value    /// Condition states that value specified not greater than current balance.
            && _value > 0                     /// Condition states that value MUST BE greater than zero.
            );
            Balances[msg.sender] -= _value;   /// Deducts units from sender actor.
            Balances[_to] += _value;          /// Adds units to recieving actor.
            return true;
    }
    
    /// Function handles transfer of units from another actor
    function TransferFrom(address _from, address _to, uint _value) public returns (bool success) {
        require(
            Allowed[_from][msg.sender] >= _value    /// Condition determines if sender actor is allowed to transfer units.
            && Balances[_from] >= _value            /// Condition states that actor transferring units are greater than stated value
            && _value > 0                           /// Condition states that value MUST BE greater than zero.
        );
        Balances[_from] -= _value;                  /// Deducts units from transferring actor.
        Balances[_to] += _value;                    /// Adds units to receiving actor.
        Allowed[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }
    
    function Approve(address _spender, uint256 _value) public returns (bool success) {
        Allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function Allowance(address _owner, address _spender) public view returns (uint256 remaining){
        return Allowed[_owner][_spender];
    }
    
}
